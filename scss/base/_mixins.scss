@use "sass:map";
@use "sass:list";

@mixin class-gen($class-name, $props, $value, $important: true, $rfs: false) {
  $prop-map: lists2map($props, $value);
  .#{$class-name} {
    @each $prop, $value in $prop-map {
      @if $prop == font-size and $rfs {
        @include font-size($value if($important, !important, null));
      } @else {
        #{$prop}: $value if($important, !important, null);
      }
    }
  }
}

@mixin util-gen($util-defs) {
  @each $util-name, $util-def in $util-defs {
    $props: map.get($util-def, props);
    $prefix: map.get($util-def, prefix);
    $responsive: map.get($util-def, responsive);
    $values: map.get($util-def, values);
    $important: if(
      map-has-key($util-def, important),
      map.get($util-def, important),
      true
    );
    $rfs: if(map-has-key($util-def, rfs), map.get($util-def, rfs), false);

    @each $name, $value in $values {
      @include class-gen(
        strings-join($prefix $name),
        $props,
        $value,
        $important,
        $rfs
      );
    }
  }

  @each $util-name, $util-def in $util-defs {
    $props: map.get($util-def, props);
    $prefix: map.get($util-def, prefix);
    $responsive: map.get($util-def, responsive);
    $values: map.get($util-def, values);
    $important: if(
      map-has-key($util-def, important),
      map.get($util-def, important),
      true
    );
    $rfs: if(map-has-key($util-def, rfs), map.get($util-def, rfs), false);

    @if $responsive {
      @each $breakpoint-name, $breakpoint in $grid-breakpoints {
        @media only screen and (min-width: $breakpoint) {
          @each $name, $value in $values {
            @include class-gen(
              strings-join($prefix $name $breakpoint-name),
              $props,
              $value,
              $important,
              $rfs
            );
          }
        }
      }
    }
  }
}

@mixin util($util-def, $type, $variant, $important: false) {
  $type-def: map-get($util-def, $type);

  $props: map-get($type-def, props);
  $rfs: map-get($type-def, rfs);
  $values: map-get(map-get($type-def, values), $variant);

  $prop-map: lists2map($props, $values);

  @each $prop, $value in $prop-map {
    @if $prop == font-size and $rfs {
      @include font-size($value if($important, !important, null));
    } @else {
      #{$prop}: $value if($important, !important, null);
    }
  }
}
