@use "sass:map";
@use "sass:list";

@mixin class-gen($class-name, $props, $value, $important: true, $rfs: false) {
  $prop-map: lists2map($props, $value);
  .#{$class-name} {
    @each $prop, $value in $prop-map {
      @if $prop == font-size and $rfs {
        @include font-size($value if($important, !important, null));
      } @else {
        #{$prop}: $value if($important, !important, null);
      }
    }
  }
}

@mixin util-gen($util-defs) {
  @each $util-name, $util-def in $util-defs {
    $props: map.get($util-def, props);
    $prefix: map.get($util-def, prefix);
    $responsive: map.get($util-def, responsive);
    $values: map.get($util-def, values);
    $important: if(
      map-has-key($util-def, important),
      map.get($util-def, important),
      true
    );
    $rfs: if(map-has-key($util-def, rfs), map.get($util-def, rfs), false);

    @each $name, $value in $values {
      @include class-gen(
        strings-join($prefix $name),
        $props,
        $value,
        $important,
        $rfs
      );
    }
  }

  @each $util-name, $util-def in $util-defs {
    $props: map.get($util-def, props);
    $prefix: map.get($util-def, prefix);
    $responsive: map.get($util-def, responsive);
    $values: map.get($util-def, values);
    $important: if(
      map-has-key($util-def, important),
      map.get($util-def, important),
      true
    );
    $rfs: if(map-has-key($util-def, rfs), map.get($util-def, rfs), false);

    @if $responsive {
      @each $breakpoint-name, $breakpoint in $grid-breakpoints {
        @media only screen and (min-width: $breakpoint) {
          @each $name, $value in $values {
            @include class-gen(
              strings-join($prefix $name $breakpoint-name),
              $props,
              $value,
              $important,
              $rfs
            );
          }
        }
      }
    }
  }
}

@mixin util($util-def, $type, $variant, $important: false) {
  $type-def: map-get($util-def, $type);

  $props: map-get($type-def, props);
  $rfs: map-get($type-def, rfs);
  $values: map-get(map-get($type-def, values), $variant);

  $prop-map: lists2map($props, $values);

  @each $prop, $value in $prop-map {
    @if $prop == font-size and $rfs {
      @include font-size($value if($important, !important, null));
    } @else {
      #{$prop}: $value if($important, !important, null);
    }
  }
}

@mixin btn-color-gen($variants) {
  @each $variant-name, $variant in $variants {
    $type: map-get($variant, "type");
    $main-color: map-get(map-get($variant, "colors"), "main");
    $text-color: map-get(map-get($variant, "colors"), "text");
    $selector: ();
    @each $name in map-get($variant, "names") {
      $selector: append($selector, ".#{$name}", $separator: comma);
    }

    #{$selector} {
      @extend .btn;

      $main-bg: map-get($main-color, "400");
      $main-border: map-get($main-color, "400");
      $main-text: map-get($text-color, "800");
      $hover-bg: map-get($main-color, "400");
      $active-bg: map-get($main-color, "200");
      $active-border: map-get($main-color, "200");
      $active-text: map-get($text-color, "700");
      $disabled-bg: map-get($main-color, "600");
      $disabled-border: map-get($main-color, "600");
      $disabled-text: map-get($text-color, "800");
      @if $type == "outline" {
        $main-bg: transparent;
        $main-border: map-get($main-color, "400");
        $main-text: map-get($text-color, "400");
        $hover-bg: transparentize(map-get($main-color, "400"), 0.75);
        $active-bg: transparentize(map-get($main-color, "400"), 0.5);
        $active-border: map-get($main-color, "400");
        $active-text: map-get($text-color, "400");
        $disabled-bg: transparent;
        $disabled-border: map-get($main-color, "600");
        $disabled-text: map-get($text-color, "600");
      } @else if $type == "transparent" {
        $main-bg: transparent;
        $main-border: transparent;
        $main-text: map-get($text-color, "400");
        $hover-bg: transparentize(map-get($main-color, "400"), 0.75);
        $active-bg: transparentize(map-get($main-color, "400"), 0.5);
        $active-border: transparent;
        $active-text: map-get($text-color, "200");
        $disabled-bg: transparent;
        $disabled-border: transparent;
        $disabled-text: map-get($text-color, "600");
        text-decoration: underline;
      }

      border: $border-width solid $main-border;
      color: $main-text;
      background: $main-bg;
      --outline-color: #{transparentize($main-bg, 0.5)};

      &:hover,
      &:focus {
        --outline-size: #{map-get($outline-sizes, "md")};
        background: $hover-bg;
      }
      &:active {
        color: $active-text;
        background: $active-bg;
        border-color: $active-border;
      }
      &:disabled {
        color: $disabled-text;
        border-color: $disabled-border;
        background: $disabled-bg;
        --outline-size: 0;
        --outline-color: transparent;
      }
    }
  }
}

@mixin link-color-gen($variants) {
  @each $variant-name, $variant in $variants {
    $color: map-get($variant, "color");
    $selector: ();
    @each $name in map-get($variant, "names") {
      $selector: append($selector, ".#{$name}", $separator: comma);
    }

    #{$selector} {
      @extend .link;
      color: map-get($color, "400");
      &:active {
        color: map-get($color, "200");
      }
    }
  }
}
